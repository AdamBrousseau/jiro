#! /usr/bin/env bash
#*******************************************************************************
# Copyright (c) 2018 Eclipse Foundation and others.
# This program and the accompanying materials are made available
# under the terms of the Eclipse Public License 2.0
# which is available at http://www.eclipse.org/legal/epl-v20.html,
# or the MIT License which is available at https://opensource.org/licenses/MIT.
# SPDX-License-Identifier: EPL-2.0 OR MIT
#*******************************************************************************
#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

IFS=$'\n\t'

push() {
  local image="${1}"
  local tag="${2}"
  local retry="${3:-5}"
  n=0
  until [ $n -ge ${retry} ]; do
    docker push "${image}:${tag}" && break
    echo "Try #$n failed ($image:$tag)... sleeping for 15 seconds"
    n=$[$n+1]
    sleep 15
  done
}

build() {
  local image="${1}"
  local tag="${2}"
  local dockerfile="${3}"
  local context="${4:-"$(dirname "${dockerfile}")"}"

  docker build --rm -t "${image}:${tag}" -f "${dockerfile}" "${context}"
}

build_and_push() {
  local image="${1}"
  local tag="${2}"
  local dockerfile="${3}"
  local context="${4:-"$(dirname "${dockerfile}")"}"
  build "${image}" "${tag}" "${dockerfile}" "${context}"
  push "${image}" "${tag}"
}

build_all() {
  local repo="${1}"
  local from="${2}"
  local image="${3:-}"
  mapfile -t dockerfiles < <(find -L ${from} -iname '*Dockerfile' | sed 's|\./||' | sort -V)
  for dockerfile in ${dockerfiles[@]}; do
    local build_dir=$(dirname "$dockerfile")
    local tag=${build_dir##*\/}
    : "${image:=$(basename ${from})}"

    if [[ -z "${tag:-}" ]] || [[ "$tag" == "$(basename ${from})" ]]; then
      tag="latest"
    fi

    build "${repo}/${image}" "${tag}" "${dockerfile}"

    if [[ "${dockerfile}" = "${dockerfiles[-1]}" ]]; then
      tag_alias "${repo}/${image}" "${tag}" "latest"
    fi
  done
}

push_all() {
  local repo="${1}"
  local from="${2}"
  local image="${3:-}"
  mapfile -t dockerfiles < <(find -L ${from} -iname '*Dockerfile' | sed 's|\./||' | sort -V)
  for dockerfile in ${dockerfiles[@]}; do
    local build_dir=$(dirname "$dockerfile")
    local tag="${build_dir##*\/}"
    : "${image:=$(basename ${from})}"

    if [[ -z "${tag:-}" ]] || [[ "$tag" == "$(basename ${from})" ]]; then
      tag=latest
    fi

    push "${repo}/${image}" $tag

    if [[ "${dockerfile}" = "${dockerfiles[-1]}" ]]; then
      push "${repo}/${image}" latest
    fi
  done
}

tag_alias() {
  local image="${1}"
  local tag="${2}"
  local newtag="${3}"
  docker tag "${image}:${tag}" "${image}:${newtag}"
}

clean() {
  docker container prune -f
  docker image prune -f
  docker volume prune -f
}

rmi_all() {
  local r="${1}"
  if [[ $(docker image list ${r} | wc -l) -gt 1 ]]; then
    docker image list ${r} | tr -s ' ' | tail -n +2 | cut -d ' ' -f 3 | sort -u | xargs docker image rm -f
  fi
}

main() {
  echo "You must enter a valid command"
  exit 1
}

run() {
  local args=$*
  local f="${1:-}"

  if [[ "$f" == "" ]]; then
    main
  else
    $args
  fi
}

run "$@"